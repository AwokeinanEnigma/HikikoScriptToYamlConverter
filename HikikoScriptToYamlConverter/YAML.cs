using System.Diagnostics;
using System.Text.RegularExpressions;

namespace HikikoScriptToYamlConverter;

// I have no interest in ever interacting with YAML. 
public class YAML
{
    
   public abstract class ModifierApplier
   {
       public abstract TextModifierType type { get; set; }
       public abstract string ApplyModifier(TextModifierReader.ModifierData modifierData, string text);
       
   }

   public class JumpingApplier : ModifierApplier
   {
       public override TextModifierType type { get; set; } = TextModifierType.Jumping;
    
       public override string ApplyModifier(TextModifierReader.ModifierData modifierData, string text)
       {
           ModifierToPrefix.TryGetValue(type, out string prefix);
           string cleaned = TextModifierReader.RemoveModifiers(text);
           return prefix + cleaned;
       }
   }
   
   public static List<ModifierApplier> Appliers;
   public static Dictionary<TextModifierType, string> ModifierToPrefix = new Dictionary<TextModifierType, string>()
   {
       // i have no idea if these are what the writers meant
       { TextModifierType.WavyGrowing, ""},
       { TextModifierType.Growing, "\\{"},
       { TextModifierType.SmallerFont, "\\}" },
       { TextModifierType.Jumping, "\\SINV[2]" },
       { TextModifierType.Shaking, "\\SINH[1]" },
       // Note to self, I might need to do something differently here because this doesn't apply to a whole text string, and it can be in segments
       { TextModifierType.WackyWeirdAndStraightUpStrangeText, "\\fn<OMORI_GAME>" },
   };

   private static List<YAMLData> yamlDatas = new List<YAMLData>();

   private struct YAMLData
   {
       public string text;
       public string faceSet;
       public int faceIndex;
       public int number;
   }
   
   private int currentMessage = 0;



   public static void Initialize()
   {
       Appliers = new List<ModifierApplier>();
       Appliers.Add(new JumpingApplier());
   }

   public void ApplyAndWrite(MessageProcessor.MessageData messageData, List<TextModifierReader.ModifierData> modifierData)
   {
       string nameStart = $"\\n<{messageData.name}>";
       string dump = messageData.text;
       //apply modifiers
       foreach (var modifier in modifierData)
       {    
           
           // I love linq!
           dump = Appliers.Find(x => x.type == modifier.type).ApplyModifier(modifier, dump);
       }
       
       YAMLData data = new YAMLData()
       {
           text = nameStart + dump,
           faceSet = messageData.faceSet,
           faceIndex = messageData.faceIndex,
           number =  currentMessage,
       };
       yamlDatas.Add(data);
       currentMessage++;
   }
   
   private string template =
       "message_NUMBERHERE:" + Environment.NewLine +
       "    faceset: FACESETHERE" + Environment.NewLine +
       "    faceindex: FACEINDEXHERE" + Environment.NewLine +
       "    text: TEXTHERE";
   
   public void Finialize()
   {
       List<string> okForRealThisTime = new List<string>();
       okForRealThisTime.Add("# ===============================================");
       okForRealThisTime.Add("# Generated by HikikoScriptToYamlConverter 1.0.0");
       okForRealThisTime.Add("# ===============================================");
       okForRealThisTime.Add(Environment.NewLine);
         
       foreach (YAMLData data in yamlDatas)
       {
           // GET GOT
           string formatted = this.template;
           formatted = formatted.Replace("NUMBERHERE",data.number.ToString());
           if (data.faceSet != null)
           {
               formatted = formatted.Replace("FACESETHERE", data.faceSet);
               formatted = formatted.Replace("FACEINDEXHERE", data.faceIndex.ToString());
           }
           else
           {
               formatted = formatted.Replace("    faceset: FACESETHERE", string.Empty);
               formatted = formatted.Replace("    faceindex: FACEINDEXHERE", string.Empty);
           }

           formatted =   formatted.Replace("TEXTHERE", data.text);
           
           // remove whitespace
           formatted = Regex.Replace(formatted, @"^\s+$[\r\n]*", string.Empty, RegexOptions.Multiline);
           
           okForRealThisTime.Add(formatted);
           okForRealThisTime.Add(Environment.NewLine);
       }
       
         File.WriteAllLines("messages.yaml", okForRealThisTime);
   }
}